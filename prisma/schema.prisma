datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Post      Post[]
  View      View[]
  Reaction  Reaction[]
  Comment   Comment[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  @@unique([slug])
  @@map("categories")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  postId      String
  userId      String?
  anonymousId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  post Post  @relation(fields: [postId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Post {
  id          String @id @default(cuid())
  title       String
  description String

  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  categories  Category[]
  publishedAt DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       View[]
  reactions   Reaction[]
  comments    Comment[]

  @@map("posts")
}

model View {
  id          String   @id @default(cuid())
  postId      String
  userId      String?
  anonymousId String?
  createdAt   DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@map("views")
}

model Reaction {
  id           String  @id @default(cuid())
  reactionType String
  postId       String
  post         Post?   @relation(fields: [postId], references: [id])
  userId       String?
  user         User?   @relation(fields: [userId], references: [id])
  anonymousId  String?

  @@map("reactions")
}
